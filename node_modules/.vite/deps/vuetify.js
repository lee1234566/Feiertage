import {
  DateAdapterSymbol,
  DateOptionsSymbol,
  createDate,
  useDate
} from "./chunk-JRMYPV4V.js";
import {
  useLayout
} from "./chunk-GTJXOS23.js";
import "./chunk-C3BQ33FV.js";
import {
  IconSymbol,
  createIcons
} from "./chunk-CNAYGJQP.js";
import {
  DisplaySymbol,
  createDisplay,
  useDisplay
} from "./chunk-ZEBOZD2A.js";
import {
  LocaleSymbol,
  createLocale,
  useLocale,
  useRtl
} from "./chunk-65XVJOQC.js";
import "./chunk-N6ISWRIS.js";
import {
  ThemeSymbol,
  createTheme,
  useTheme
} from "./chunk-F42WMXEK.js";
import {
  DefaultsSymbol,
  IN_BROWSER,
  createDefaults,
  defineComponent,
  getUid,
  mergeDeep,
  refElement,
  useDefaults
} from "./chunk-MT3A2Y4Q.js";
import {
  inject,
  nextTick,
  reactive
} from "./chunk-ESTIRR4N.js";
import "./chunk-CSAU5B4Q.js";

// node_modules/vuetify/lib/composables/goto.mjs
var GoToSymbol = Symbol.for("vuetify:goto");
function genDefaults() {
  return {
    container: void 0,
    duration: 300,
    layout: false,
    offset: 0,
    easing: "easeInOutCubic",
    patterns: {
      linear: (t) => t,
      easeInQuad: (t) => t ** 2,
      easeOutQuad: (t) => t * (2 - t),
      easeInOutQuad: (t) => t < 0.5 ? 2 * t ** 2 : -1 + (4 - 2 * t) * t,
      easeInCubic: (t) => t ** 3,
      easeOutCubic: (t) => --t ** 3 + 1,
      easeInOutCubic: (t) => t < 0.5 ? 4 * t ** 3 : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,
      easeInQuart: (t) => t ** 4,
      easeOutQuart: (t) => 1 - --t ** 4,
      easeInOutQuart: (t) => t < 0.5 ? 8 * t ** 4 : 1 - 8 * --t ** 4,
      easeInQuint: (t) => t ** 5,
      easeOutQuint: (t) => 1 + --t ** 5,
      easeInOutQuint: (t) => t < 0.5 ? 16 * t ** 5 : 1 + 16 * --t ** 5
    }
  };
}
function getContainer(el) {
  return getTarget(el) ?? (document.scrollingElement || document.body);
}
function getTarget(el) {
  return typeof el === "string" ? document.querySelector(el) : refElement(el);
}
function getOffset(target, horizontal, rtl) {
  if (typeof target === "number")
    return horizontal && rtl ? -target : target;
  let el = getTarget(target);
  let totalOffset = 0;
  while (el) {
    totalOffset += horizontal ? el.offsetLeft : el.offsetTop;
    el = el.offsetParent;
  }
  return totalOffset;
}
function createGoTo(options, locale) {
  return {
    rtl: locale.isRtl,
    options: mergeDeep(genDefaults(), options)
  };
}
async function scrollTo(_target, _options, horizontal, goTo) {
  const options = mergeDeep(goTo == null ? void 0 : goTo.options, _options);
  const rtl = goTo == null ? void 0 : goTo.rtl.value;
  const target = (typeof _target === "number" ? _target : getTarget(_target)) ?? 0;
  const container = options.container === "parent" && target instanceof HTMLElement ? target.parentElement : getContainer(options.container);
  const ease = typeof options.easing === "function" ? options.easing : options.patterns[options.easing];
  if (!ease)
    throw new TypeError(`Easing function "${options.easing}" not found.`);
  let targetLocation;
  if (typeof target === "number") {
    targetLocation = getOffset(target, horizontal, rtl);
  } else {
    targetLocation = getOffset(target, horizontal, rtl) - getOffset(container, horizontal, rtl);
    if (options.layout) {
      const styles = window.getComputedStyle(target);
      const layoutOffset = styles.getPropertyValue("--v-layout-top");
      if (layoutOffset)
        targetLocation -= parseInt(layoutOffset, 10);
    }
  }
  targetLocation += options.offset;
  const startLocation = (horizontal ? container.scrollLeft : container.scrollTop) ?? 0;
  if (targetLocation === startLocation)
    return Promise.resolve(targetLocation);
  const startTime = performance.now();
  return new Promise((resolve) => requestAnimationFrame(function step(currentTime) {
    const timeElapsed = currentTime - startTime;
    const progress = Math.abs(options.duration ? Math.min(timeElapsed / options.duration, 1) : 1);
    const location = Math.floor(startLocation + (targetLocation - startLocation) * ease(progress));
    container[horizontal ? "scrollLeft" : "scrollTop"] = location;
    if (progress === 1)
      return resolve(targetLocation);
    let clientSize;
    let reachEnd;
    if (!horizontal) {
      clientSize = container === document.body ? document.documentElement.clientHeight : container.clientHeight;
      reachEnd = clientSize + container.scrollTop >= container.scrollHeight;
      if (targetLocation > container.scrollTop && reachEnd)
        return resolve(targetLocation);
    } else {
      clientSize = container === document.body ? document.documentElement.clientWidth : container.clientWidth;
      reachEnd = clientSize + container.scrollLeft >= container.scrollWidth;
      if (targetLocation > container.scrollLeft && reachEnd)
        return resolve(targetLocation);
    }
    requestAnimationFrame(step);
  }));
}
function useGoTo() {
  let _options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const goTo = inject(GoToSymbol);
  if (!goTo)
    throw new Error("[Vuetify] Could not find injected goto instance");
  async function go(target, options) {
    return scrollTo(target, mergeDeep(_options, options), false, goTo);
  }
  go.horizontal = async (target, options) => {
    return scrollTo(target, mergeDeep(_options, options), true, goTo);
  };
  return go;
}

// node_modules/vuetify/lib/framework.mjs
function createVuetify() {
  let vuetify = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  const {
    blueprint,
    ...rest
  } = vuetify;
  const options = mergeDeep(blueprint, rest);
  const {
    aliases = {},
    components = {},
    directives = {}
  } = options;
  const defaults = createDefaults(options.defaults);
  const display = createDisplay(options.display, options.ssr);
  const theme = createTheme(options.theme);
  const icons = createIcons(options.icons);
  const locale = createLocale(options.locale);
  const date = createDate(options.date, locale);
  const goTo = createGoTo(options.goTo, locale);
  const install = (app) => {
    for (const key in directives) {
      app.directive(key, directives[key]);
    }
    for (const key in components) {
      app.component(key, components[key]);
    }
    for (const key in aliases) {
      app.component(key, defineComponent({
        ...aliases[key],
        name: key,
        aliasName: aliases[key].name
      }));
    }
    theme.install(app);
    app.provide(DefaultsSymbol, defaults);
    app.provide(DisplaySymbol, display);
    app.provide(ThemeSymbol, theme);
    app.provide(IconSymbol, icons);
    app.provide(LocaleSymbol, locale);
    app.provide(DateOptionsSymbol, date.options);
    app.provide(DateAdapterSymbol, date.instance);
    app.provide(GoToSymbol, goTo);
    if (IN_BROWSER && options.ssr) {
      if (app.$nuxt) {
        app.$nuxt.hook("app:suspense:resolve", () => {
          display.update();
        });
      } else {
        const {
          mount
        } = app;
        app.mount = function() {
          const vm = mount(...arguments);
          nextTick(() => display.update());
          app.mount = mount;
          return vm;
        };
      }
    }
    getUid.reset();
    if (typeof __VUE_OPTIONS_API__ !== "boolean" || __VUE_OPTIONS_API__) {
      app.mixin({
        computed: {
          $vuetify() {
            return reactive({
              defaults: inject2.call(this, DefaultsSymbol),
              display: inject2.call(this, DisplaySymbol),
              theme: inject2.call(this, ThemeSymbol),
              icons: inject2.call(this, IconSymbol),
              locale: inject2.call(this, LocaleSymbol),
              date: inject2.call(this, DateAdapterSymbol)
            });
          }
        }
      });
    }
  };
  return {
    install,
    defaults,
    display,
    theme,
    icons,
    locale,
    date,
    goTo
  };
}
var version = "3.5.1";
createVuetify.version = version;
function inject2(key) {
  var _a, _b;
  const vm = this.$;
  const provides = ((_a = vm.parent) == null ? void 0 : _a.provides) ?? ((_b = vm.vnode.appContext) == null ? void 0 : _b.provides);
  if (provides && key in provides) {
    return provides[key];
  }
}
export {
  createVuetify,
  useDate,
  useDefaults,
  useDisplay,
  useGoTo,
  useLayout,
  useLocale,
  useRtl,
  useTheme,
  version
};
//# sourceMappingURL=vuetify.js.map
